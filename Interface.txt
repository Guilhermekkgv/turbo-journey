pcall(function()    game:GetService('CoreGui'):FindFirstChild('ui'):Remove()end)local TweenService = game:GetService("TweenService")local UserInputService = game:GetService("UserInputService")local RunService = game:GetService("RunService")local Players = game:GetService("Players")local HttpService = game:GetService("HttpService")local Library = {}local LocalPlayer = Players.LocalPlayerlocal Player = LocalPlayerlocal Mouse = Player:GetMouse()local ProtectGui = protectgui or (syn and syn.protect_gui) or function() endLibrary.ConfigFolder = "InterfaceConfigs"Library.SavedResize = {    Width = nil,    Height = nil}Library.DefaultResize = {    Width = 470,    Height = 283}function Library.ValidateResizeSize(width, height)    local minWidth = 470    local minHeight = 283    local maxWidth = 1200    local maxHeight = 800    width = math.clamp(width, minWidth, maxWidth)    height = math.clamp(height, minHeight, maxHeight)    return width, heightendfunction Library.SaveResizeSettings()    local success, result = pcall(function()        local resizeData = {            Width = Library.SavedResize.Width,            Height = Library.SavedResize.Height        }        local json = HttpService:JSONEncode(resizeData)        if writefile then            if not isfolder(Library.ConfigFolder) then                makefolder(Library.ConfigFolder)            end            writefile(Library.ConfigFolder .. "/resize.json", json)            return true        else            return false, "writefile function not available"        end    end)    if not success then        print("Error saving resize settings:", result)    end    return success, resultendfunction Library.LoadResizeSettings()    local success, result = pcall(function()        if readfile and isfile(Library.ConfigFolder .. "/resize.json") then            local json = readfile(Library.ConfigFolder .. "/resize.json")            local resizeData = HttpService:JSONDecode(json)            Library.SavedResize.Width = resizeData.Width or Library.DefaultResize.Width            Library.SavedResize.Height = resizeData.Height or Library.DefaultResize.Height            return true        else            return false, "Resize settings file not found"        end    end)    if not success then        print("Error loading resize settings:", result)    end    return success, resultendfunction Library:Window(title)    Library.LoadResizeSettings()        local parent    if RunService:IsStudio() then        if gethui then            parent = gethui()        else            parent = LocalPlayer:FindFirstChild("PlayerGui")        end    elseif gethui then        parent = gethui()    else        parent = game:GetService("CoreGui")    end        local ui = Instance.new("ScreenGui")    ui.Name = "ui"    ui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling    ui.IgnoreGuiInset = true    ui.ResetOnSpawn = false        task.defer(function()        ProtectGui(ui)        ui.Parent = parent    end)        local savedWidth = Library.SavedResize.Width or Library.DefaultResize.Width    local savedHeight = Library.SavedResize.Height or Library.DefaultResize.Height        local Main = Instance.new("Frame")    Main.Name = "Main"    Main.Parent = ui    Main.BackgroundColor3 = Color3.fromRGB(30, 30, 30)    Main.BorderSizePixel = 0    Main.Position = UDim2.new(0.5, 0, 0.5, 0)    Main.AnchorPoint = Vector2.new(0.5, 0.5)    Main.Size = UDim2.new(0, savedWidth, 0, savedHeight)    Main.Active = true    Main.Selectable = true        local dragging = false    local dragInput, dragStart, startPos        local function updateInput(input)        pcall(function()            local Delta = input.Position - dragStart            Main.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + Delta.X, startPos.Y.Scale, startPos.Y.Offset + Delta.Y)        end)    end        Main.InputBegan:Connect(function(input)        pcall(function()            if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then                dragging = true                dragStart = input.Position                startPos = Main.Position                                input.Changed:Connect(function()                    pcall(function()                        if input.UserInputState == Enum.UserInputState.End then                            dragging = false                        end                    end)                end)            end        end)    end)        Main.InputChanged:Connect(function(input)        pcall(function()            if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then                dragInput = input            end        end)    end)        UserInputService.InputChanged:Connect(function(input)        pcall(function()            if input == dragInput and dragging then                updateInput(input)            end        end)    end)        local UICorner = Instance.new("UICorner")    UICorner.CornerRadius = UDim.new(0, 6)    UICorner.Parent = Main        local Shadow = Instance.new("ImageLabel")    Shadow.Name = "Shadow"    Shadow.Parent = Main    Shadow.AnchorPoint = Vector2.new(0.5, 0.5)    Shadow.BackgroundColor3 = Color3.fromRGB(255, 255, 255)    Shadow.BackgroundTransparency = 1.000    Shadow.Position = UDim2.new(0.5, 0, 0.5, 0)    Shadow.Size = UDim2.new(1, 30, 1, 30)    Shadow.ZIndex = 0    Shadow.Image = "rbxassetid://5554236805"    Shadow.ImageColor3 = Color3.fromRGB(0, 0, 0)    Shadow.ScaleType = Enum.ScaleType.Slice    Shadow.SliceCenter = Rect.new(23, 23, 277, 277)        local Top = Instance.new("Frame")    Top.Name = "Top"    Top.Parent = Main    Top.BackgroundColor3 = Color3.fromRGB(24, 24, 24)    Top.BorderSizePixel = 0    Top.Size = UDim2.new(1, 0, 0, 34)        local TopCorner = Instance.new("UICorner")    TopCorner.CornerRadius = UDim.new(0, 6)    TopCorner.Parent = Top        local TopCover = Instance.new("Frame")    TopCover.Name = "Cover"    TopCover.Parent = Top    TopCover.AnchorPoint = Vector2.new(0.5, 1)    TopCover.BackgroundColor3 = Color3.fromRGB(24, 24, 24)    TopCover.BorderSizePixel = 0    TopCover.Position = UDim2.new(0.5, 0, 1, 0)    TopCover.Size = UDim2.new(1, 0, 0, 4)        local Line = Instance.new("Frame")    Line.Name = "Line"    Line.Parent = Top    Line.AnchorPoint = Vector2.new(0.5, 1)    Line.BackgroundColor3 = Color3.fromRGB(255, 255, 255)    Line.BackgroundTransparency = 0.920    Line.Position = UDim2.new(0.5, 0, 1, 1)    Line.Size = UDim2.new(1, 0, 0, 1)        local Logo = Instance.new("ImageLabel")    Logo.Name = "Logo"    Logo.Parent = Top    Logo.AnchorPoint = Vector2.new(0, 0.5)    Logo.BackgroundColor3 = Color3.fromRGB(255, 255, 255)    Logo.BackgroundTransparency = 1.000    Logo.Position = UDim2.new(0, 4, 0.5, 0)    Logo.Size = UDim2.new(0, 26, 0, 30)    Logo.Image = "http://www.roblox.com/asset/?id=7803241868"    Logo.ImageColor3 = Color3.fromRGB(232, 17, 85)        local Minimize = Instance.new("ImageButton")    Minimize.Name = "Minimize"    Minimize.Parent = Top    Minimize.AnchorPoint = Vector2.new(1, 0.5)    Minimize.BackgroundColor3 = Color3.fromRGB(255, 255, 255)    Minimize.BackgroundTransparency = 1.000    Minimize.Position = UDim2.new(1, -30, 0.5, 0)    Minimize.Size = UDim2.new(0, 20, 0, 20)    Minimize.Image = "rbxassetid://7733771811"    Minimize.ImageColor3 = Color3.fromRGB(199, 199, 199)    Minimize.ScaleType = Enum.ScaleType.Crop        local MinimizedIcon = Instance.new("ImageButton")    MinimizedIcon.Name = "MinimizedIcon"    MinimizedIcon.Parent = ui    MinimizedIcon.AnchorPoint = Vector2.new(1, 1)    MinimizedIcon.BackgroundColor3 = Color3.fromRGB(232, 17, 85)    MinimizedIcon.BackgroundTransparency = 0    MinimizedIcon.BorderSizePixel = 0    MinimizedIcon.Position = UDim2.new(1, -20, 1, -20)    MinimizedIcon.Size = UDim2.new(0, 40, 0, 40)    MinimizedIcon.Visible = false    MinimizedIcon.ZIndex = 10    MinimizedIcon.Image = "http://www.roblox.com/asset/?id=7803241868"        local MinimizedCorner = Instance.new("UICorner")    MinimizedCorner.CornerRadius = UDim.new(0, 8)    MinimizedCorner.Parent = MinimizedIcon        local minDragging = false    local minDragInput, minDragStart, minStartPos        local function updateMinInput(input)        pcall(function()            local Delta = input.Position - minDragStart            MinimizedIcon.Position = UDim2.new(minStartPos.X.Scale, minStartPos.X.Offset + Delta.X, minStartPos.Y.Scale, minStartPos.Y.Offset + Delta.Y)        end)    end        MinimizedIcon.InputBegan:Connect(function(input)        pcall(function()            if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then                minDragging = true                minDragStart = input.Position                minStartPos = MinimizedIcon.Position                                input.Changed:Connect(function()                    pcall(function()                        if input.UserInputState == Enum.UserInputState.End then                            minDragging = false                        end                    end)                end)            end        end)    end)        MinimizedIcon.InputChanged:Connect(function(input)        pcall(function()            if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then                minDragInput = input            end        end)    end)        UserInputService.InputChanged:Connect(function(input)        pcall(function()            if input == minDragInput and minDragging then                updateMinInput(input)            end        end)    end)        Minimize.MouseButton1Click:Connect(function()        pcall(function()            Main.Visible = false            MinimizedIcon.Visible = true        end)    end)        Minimize.MouseEnter:Connect(function()        pcall(function()            TweenService:Create(Minimize, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {ImageColor3 = Color3.fromRGB(255,255,255)}):Play()        end)    end)        Minimize.MouseLeave:Connect(function()        pcall(function()            TweenService:Create(Minimize, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {ImageColor3 = Color3.fromRGB(166, 166, 166)}):Play()        end)    end)        MinimizedIcon.MouseButton1Click:Connect(function()        pcall(function()            Main.Visible = true            MinimizedIcon.Visible = false        end)    end)        local Close = Instance.new("ImageButton")    Close.Name = "Close"    Close.Parent = Top    Close.AnchorPoint = Vector2.new(1, 0.5)    Close.BackgroundColor3 = Color3.fromRGB(255, 255, 255)    Close.BackgroundTransparency = 1.000    Close.Position = UDim2.new(1, -6, 0.5, 0)    Close.Size = UDim2.new(0, 20, 0, 20)    Close.Image = "http://www.roblox.com/asset/?id=7755372427"    Close.ImageColor3 = Color3.fromRGB(199, 199, 199)    Close.ScaleType = Enum.ScaleType.Crop        Close.MouseButton1Click:Connect(function()        pcall(function()            Library.SaveResizeSettings()            ui:Destroy()        end)    end)        Close.MouseEnter:Connect(function()        TweenService:Create(Close, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {ImageColor3 = Color3.fromRGB(255,255,255)}):Play()    end)        Close.MouseLeave:Connect(function()        TweenService:Create(Close, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {ImageColor3 = Color3.fromRGB(166, 166, 166)}):Play()    end)        local GameName = Instance.new("TextLabel")    GameName.Name = "GameName"    GameName.Parent = Top     GameName.AnchorPoint = Vector2.new(0, 0.5)    GameName.BackgroundColor3 = Color3.fromRGB(255, 255, 255)    GameName.BackgroundTransparency = 1.000    GameName.Position = UDim2.new(0, 32, 0.5, 0)    GameName.Size = UDim2.new(0, 165, 0, 22)    GameName.Font = Enum.Font.Gotham    GameName.Text = title or "Game Name"    GameName.TextColor3 = Color3.fromRGB(232, 17, 85)    GameName.TextSize = 14.000    GameName.TextXAlignment = Enum.TextXAlignment.Left        local Tabs = Instance.new("Frame")    Tabs.Name = "Tabs"    Tabs.Parent = Main    Tabs.BackgroundColor3 = Color3.fromRGB(33, 33, 33)    Tabs.BorderSizePixel = 0    Tabs.Position = UDim2.new(0, 0, 0, 35)    Tabs.Size = UDim2.new(0, 122, 1, -35)        local TabsCorner = Instance.new("UICorner")    TabsCorner.CornerRadius = UDim.new(0, 6)    TabsCorner.Parent = Tabs        local TabsCover = Instance.new("Frame")    TabsCover.Name = "Cover"    TabsCover.Parent = Tabs    TabsCover.AnchorPoint = Vector2.new(1, 0.5)    TabsCover.BackgroundColor3 = Color3.fromRGB(33, 33, 33)    TabsCover.BorderSizePixel = 0    TabsCover.Position = UDim2.new(1, 0, 0.5, 0)    TabsCover.Size = UDim2.new(0, 5, 1, 0)        local TabsContainer = Instance.new("Frame")    TabsContainer.Name = "TabsContainer"    TabsContainer.Parent = Tabs    TabsContainer.BackgroundColor3 = Color3.fromRGB(255, 255, 255)    TabsContainer.BackgroundTransparency = 1.000    TabsContainer.Size = UDim2.new(1, 0, 1, 0)        local TabsList = Instance.new("UIListLayout")    TabsList.Name = "TabsList"    TabsList.Parent = TabsContainer    TabsList.HorizontalAlignment = Enum.HorizontalAlignment.Center    TabsList.SortOrder = Enum.SortOrder.LayoutOrder    TabsList.Padding = UDim.new(0, 5)        local TabsPadding = Instance.new("UIPadding")    TabsPadding.Parent = TabsContainer    TabsPadding.PaddingTop = UDim.new(0, 5)        local Pages = Instance.new("Frame")    Pages.Name = "Pages"    Pages.Parent = Main    Pages.BackgroundColor3 = Color3.fromRGB(30, 30, 30)    Pages.BorderSizePixel = 0    Pages.Position = UDim2.new(0, 130, 0, 42)    Pages.Size = UDim2.new(1, -138, 1, -50)        local PagesCorner = Instance.new("UICorner")    PagesCorner.CornerRadius = UDim.new(0, 6)    PagesCorner.Parent = Pages        local Resize = Instance.new("ImageButton")    Resize.Name = "Resize"    Resize.Parent = Main    Resize.AnchorPoint = Vector2.new(1, 1)    Resize.BackgroundTransparency = 1.000    Resize.Position = UDim2.new(1, -4, 1, -4)    Resize.Size = UDim2.new(0, 16, 0, 16)    Resize.ZIndex = 2    Resize.Image = "rbxassetid://3926307971"    Resize.ImageColor3 = Color3.fromRGB(186, 13, 68)    Resize.ImageRectOffset = Vector2.new(204, 364)    Resize.ImageRectSize = Vector2.new(36, 36)        local resizing = false    local resizeStart, startSize        Resize.InputBegan:Connect(function(input)        pcall(function()            if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then                resizing = true                startSize = Main.Size                resizeStart = Vector2.new(input.Position.X, input.Position.Y)                                input.Changed:Connect(function()                    pcall(function()                        if input.UserInputState == Enum.UserInputState.End then                            resizing = false                            Library.SaveResizeSettings()                        end                    end)                end)            end        end)    end)        UserInputService.InputChanged:Connect(function(input)        pcall(function()            if resizing and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then                local currentPos = Vector2.new(input.Position.X, input.Position.Y)                local delta = currentPos - resizeStart                local newWidth = math.max(470, startSize.X.Offset + delta.X)                local newHeight = math.max(283, startSize.Y.Offset + delta.Y)                newWidth, newHeight = Library.ValidateResizeSize(newWidth, newHeight)                Main.Size = UDim2.new(0, newWidth, 0, newHeight)                Library.SavedResize.Width = newWidth                Library.SavedResize.Height = newHeight            end        end)    end)        local TabFunctions = {}        function TabFunctions:Tab(tabInfo)        local title, icon, default        if type(tabInfo) == "table" then            title = tabInfo[1] or "Tab"            icon = tabInfo[2]            default = tabInfo[3]        else            title = tabInfo or "Tab"        end                local TabButton = Instance.new("TextButton")        TabButton.Name = "TabButton"        TabButton.Parent = TabsContainer        TabButton.BackgroundColor3 = Color3.fromRGB(232, 17, 85)        TabButton.BackgroundTransparency = 1        TabButton.Size = UDim2.new(1, -12, 0, 30)        TabButton.AutoButtonColor = false        TabButton.Font = Enum.Font.Gotham        TabButton.Text = ""        TabButton.TextColor3 = Color3.fromRGB(72,72,72)        TabButton.TextSize = 14.000                local TabCorner = Instance.new("UICorner")        TabCorner.CornerRadius = UDim.new(0, 6)        TabCorner.Parent = TabButton                local TabContent = Instance.new("Frame")        TabContent.Name = "TabContent"        TabContent.Parent = TabButton        TabContent.BackgroundTransparency = 1        TabContent.Size = UDim2.new(1, 0, 1, 0)                local Icon = nil        if icon then            Icon = Instance.new("ImageLabel")            Icon.Name = "Icon"            Icon.Parent = TabContent            Icon.BackgroundTransparency = 1            Icon.Position = UDim2.new(0, 5, 0.5, -10)            Icon.Size = UDim2.new(0, 20, 0, 20)            Icon.Image = icon            Icon.ImageColor3 = Color3.fromRGB(232, 17, 85)        end                local TextLabel = Instance.new("TextLabel")        TextLabel.Name = "TextLabel"        TextLabel.Parent = TabContent        TextLabel.BackgroundTransparency = 1        TextLabel.Size = UDim2.new(1, 0, 1, 0)        TextLabel.Font = Enum.Font.Gotham        TextLabel.Text = title        TextLabel.TextColor3 = Color3.fromRGB(72,72,72)        TextLabel.TextSize = 14.000        TextLabel.TextXAlignment = Enum.TextXAlignment.Center                if Icon then            TextLabel.Position = UDim2.new(0, 25, 0, 0)            TextLabel.TextXAlignment = Enum.TextXAlignment.Left        end                local Page = Instance.new("ScrollingFrame")        Page.Name = "Page"        Page.Visible = false        Page.Parent = Pages        Page.Active = true        Page.BackgroundColor3 = Color3.fromRGB(255, 255, 255)        Page.BackgroundTransparency = 1.000        Page.BorderSizePixel = 0        Page.Size = UDim2.new(1, 0, 1, 0)        Page.CanvasPosition = Vector2.new(0, 0)        Page.ScrollBarThickness = 2        Page.ScrollBarImageColor3 = Color3.fromRGB(255, 24, 101)                local PageList = Instance.new("UIListLayout")        PageList.Parent = Page        PageList.HorizontalAlignment = Enum.HorizontalAlignment.Center        PageList.SortOrder = Enum.SortOrder.LayoutOrder        PageList.Padding = UDim.new(0, 6)                local PagePadding = Instance.new("UIPadding")        PagePadding.Parent = Page        PagePadding.PaddingTop = UDim.new(0, 5)                PageList:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()            Page.CanvasSize = UDim2.new(0, 0, 0, PageList.AbsoluteContentSize.Y)        end)                TabButton.MouseButton1Click:Connect(function()            pcall(function()                for _,v in next, Pages:GetChildren() do                    if v:IsA("ScrollingFrame") then                        v.Visible = false                    end                end                Page.Visible = true                                for _,v in next, TabsContainer:GetChildren() do                    if v.Name == 'TabButton' then                        TweenService:Create(v, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {BackgroundTransparency = 1}):Play()                        if v:FindFirstChild("TabContent") and v.TabContent:FindFirstChild("TextLabel") then                            TweenService:Create(v.TabContent.TextLabel, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {TextColor3 = Color3.fromRGB(72,72,72)}):Play()                        end                    end                end                                TweenService:Create(TabButton, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {BackgroundTransparency = 0.6}):Play()                TweenService:Create(TextLabel, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {TextColor3 = Color3.fromRGB(255,255,255)}):Play()            end)        end)                if #TabsContainer:GetChildren() == 1 or default then            Page.Visible = true            TweenService:Create(TabButton, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {BackgroundTransparency = 0.6}):Play()            TweenService:Create(TextLabel, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {TextColor3 = Color3.fromRGB(255,255,255)}):Play()                        if default then                for _,v in next, Pages:GetChildren() do                    if v:IsA("ScrollingFrame") and v ~= Page then                        v.Visible = false                    end                end                for _,v in next, TabsContainer:GetChildren() do                    if v.Name == 'TabButton' and v ~= TabButton then                        TweenService:Create(v, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {BackgroundTransparency = 1}):Play()                        if v:FindFirstChild("TabContent") and v.TabContent:FindFirstChild("TextLabel") then                            TweenService:Create(v.TabContent.TextLabel, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {TextColor3 = Color3.fromRGB(72,72,72)}):Play()                        end                    end                end            end        end                local ElementFunctions = {}                function ElementFunctions:Section(sectionInfo)            local name = (type(sectionInfo) == "table" and sectionInfo.Name) or sectionInfo or "Section"                        local Section = Instance.new("Frame")            Section.Name = "Section"            Section.Parent = Page            Section.BackgroundColor3 = Color3.fromRGB(34, 34, 34)            Section.BorderSizePixel = 0            Section.Size = UDim2.new(0, Page.AbsoluteSize.X - 12, 0, 28)                        local SectionCorner = Instance.new("UICorner")            SectionCorner.CornerRadius = UDim.new(0, 4)            SectionCorner.Parent = Section                        local SectionTitle = Instance.new("TextLabel")            SectionTitle.Name = "SectionTitle"            SectionTitle.Parent = Section            SectionTitle.BackgroundColor3 = Color3.fromRGB(255, 255, 255)            SectionTitle.BackgroundTransparency = 1.000            SectionTitle.Position = UDim2.new(0, 10, 0, 0)            SectionTitle.Size = UDim2.new(1, -20, 1, 0)            SectionTitle.Font = Enum.Font.GothamBold            SectionTitle.Text = name            SectionTitle.TextColor3 = Color3.fromRGB(232, 17, 85)            SectionTitle.TextSize = 12.000            SectionTitle.TextXAlignment = Enum.TextXAlignment.Left                        return Section        end                function ElementFunctions:Button(buttonInfo)            local name = (type(buttonInfo) == "table" and buttonInfo.Name) or "Button"            local callback = (type(buttonInfo) == "table" and buttonInfo.Callback) or function() end                        local ButtonFrame = Instance.new("Frame")            ButtonFrame.Name = "ButtonFrame"            ButtonFrame.Parent = Page            ButtonFrame.BackgroundColor3 = Color3.fromRGB(34, 34, 34)            ButtonFrame.BorderSizePixel = 0            ButtonFrame.Size = UDim2.new(0, Page.AbsoluteSize.X - 12, 0, 32)                        local ButtonCorner = Instance.new("UICorner")            ButtonCorner.CornerRadius = UDim.new(0, 4)            ButtonCorner.Parent = ButtonFrame                        local Button = Instance.new("TextButton")            Button.Name = "Button"            Button.Parent = ButtonFrame            Button.BackgroundColor3 = Color3.fromRGB(232, 17, 85)            Button.BackgroundTransparency = 0.300            Button.BorderSizePixel = 0            Button.Position = UDim2.new(0, 6, 0.5, -10)            Button.Size = UDim2.new(1, -12, 0, 20)            Button.AutoButtonColor = false            Button.Font = Enum.Font.Gotham            Button.Text = name            Button.TextColor3 = Color3.fromRGB(255, 255, 255)            Button.TextSize = 12.000                        local ButtonBCorner = Instance.new("UICorner")            ButtonBCorner.CornerRadius = UDim.new(0, 3)            ButtonBCorner.Parent = Button                        Button.MouseEnter:Connect(function()                TweenService:Create(Button, TweenInfo.new(0.15, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {BackgroundTransparency = 0}):Play()            end)                        Button.MouseLeave:Connect(function()                TweenService:Create(Button, TweenInfo.new(0.15, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {BackgroundTransparency = 0.3}):Play()            end)                        Button.MouseButton1Click:Connect(function()                pcall(callback)            end)                        return ButtonFrame        end                function ElementFunctions:Toggle(toggleInfo)            local name = (type(toggleInfo) == "table" and toggleInfo.Name) or "Toggle"            local default = (type(toggleInfo) == "table" and toggleInfo.Default) or false            local callback = (type(toggleInfo) == "table" and toggleInfo.Callback) or function() end                        local ToggleFrame = Instance.new("Frame")            ToggleFrame.Name = "ToggleFrame"            ToggleFrame.Parent = Page            ToggleFrame.BackgroundColor3 = Color3.fromRGB(34, 34, 34)            ToggleFrame.BorderSizePixel = 0            ToggleFrame.Size = UDim2.new(0, Page.AbsoluteSize.X - 12, 0, 32)                        local ToggleCorner = Instance.new("UICorner")            ToggleCorner.CornerRadius = UDim.new(0, 4)            ToggleCorner.Parent = ToggleFrame                        local ToggleTitle = Instance.new("TextLabel")            ToggleTitle.Name = "ToggleTitle"            ToggleTitle.Parent = ToggleFrame            ToggleTitle.BackgroundColor3 = Color3.fromRGB(255, 255, 255)            ToggleTitle.BackgroundTransparency = 1.000            ToggleTitle.Position = UDim2.new(0, 10, 0, 0)            ToggleTitle.Size = UDim2.new(1, -50, 1, 0)            ToggleTitle.Font = Enum.Font.Gotham            ToggleTitle.Text = name            ToggleTitle.TextColor3 = Color3.fromRGB(200, 200, 200)            ToggleTitle.TextSize = 12.000            ToggleTitle.TextXAlignment = Enum.TextXAlignment.Left                        local ToggleButton = Instance.new("TextButton")            ToggleButton.Name = "ToggleButton"            ToggleButton.Parent = ToggleFrame            ToggleButton.AnchorPoint = Vector2.new(1, 0.5)            ToggleButton.BackgroundColor3 = Color3.fromRGB(48, 48, 48)            ToggleButton.BorderSizePixel = 0            ToggleButton.Position = UDim2.new(1, -10, 0.5, 0)            ToggleButton.Size = UDim2.new(0, 32, 0, 18)            ToggleButton.AutoButtonColor = false            ToggleButton.Font = Enum.Font.Gotham            ToggleButton.Text = ""            ToggleButton.TextSize = 12.000                        local ToggleBCorner = Instance.new("UICorner")            ToggleBCorner.CornerRadius = UDim.new(1, 0)            ToggleBCorner.Parent = ToggleButton                        local ToggleCircle = Instance.new("Frame")            ToggleCircle.Name = "ToggleCircle"            ToggleCircle.Parent = ToggleButton            ToggleCircle.AnchorPoint = Vector2.new(0, 0.5)            ToggleCircle.BackgroundColor3 = Color3.fromRGB(200, 200, 200)            ToggleCircle.BorderSizePixel = 0            ToggleCircle.Position = UDim2.new(0, 2, 0.5, 0)            ToggleCircle.Size = UDim2.new(0, 14, 0, 14)                        local ToggleCCorner = Instance.new("UICorner")            ToggleCCorner.CornerRadius = UDim.new(1, 0)            ToggleCCorner.Parent = ToggleCircle                        local toggled = default                        local function updateToggle(instant)                local tweenTime = instant and 0 or 0.2                if toggled then                    TweenService:Create(ToggleButton, TweenInfo.new(tweenTime, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {BackgroundColor3 = Color3.fromRGB(232, 17, 85)}):Play()                    TweenService:Create(ToggleCircle, TweenInfo.new(tweenTime, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {Position = UDim2.new(1, -16, 0.5, 0), BackgroundColor3 = Color3.fromRGB(255, 255, 255)}):Play()                else                    TweenService:Create(ToggleButton, TweenInfo.new(tweenTime, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {BackgroundColor3 = Color3.fromRGB(48, 48, 48)}):Play()                    TweenService:Create(ToggleCircle, TweenInfo.new(tweenTime, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {Position = UDim2.new(0, 2, 0.5, 0), BackgroundColor3 = Color3.fromRGB(200, 200, 200)}):Play()                end            end                        ToggleButton.MouseButton1Click:Connect(function()                toggled = not toggled                updateToggle()                pcall(callback, toggled)            end)                        updateToggle(true)                        local ToggleFunctions = {}                        function ToggleFunctions:SetValue(value)                toggled = value                updateToggle(true)            end                        return ToggleFunctions        end                function ElementFunctions:Slider(sliderInfo)            local name = (type(sliderInfo) == "table" and sliderInfo.Name) or "Slider"            local min = (type(sliderInfo) == "table" and sliderInfo.Min) or 0            local max = (type(sliderInfo) == "table" and sliderInfo.Max) or 100            local default = (type(sliderInfo) == "table" and sliderInfo.Default) or min            local callback = (type(sliderInfo) == "table" and sliderInfo.Callback) or function() end                        local SliderFrame = Instance.new("Frame")            SliderFrame.Name = "SliderFrame"            SliderFrame.Parent = Page            SliderFrame.BackgroundColor3 = Color3.fromRGB(34, 34, 34)            SliderFrame.BorderSizePixel = 0            SliderFrame.Size = UDim2.new(0, Page.AbsoluteSize.X - 12, 0, 42)                        local SliderCorner = Instance.new("UICorner")            SliderCorner.CornerRadius = UDim.new(0, 4)            SliderCorner.Parent = SliderFrame                        local SliderTitle = Instance.new("TextLabel")            SliderTitle.Name = "SliderTitle"            SliderTitle.Parent = SliderFrame            SliderTitle.BackgroundColor3 = Color3.fromRGB(255, 255, 255)            SliderTitle.BackgroundTransparency = 1.000            SliderTitle.Position = UDim2.new(0, 10, 0, 4)            SliderTitle.Size = UDim2.new(1, -50, 0, 14)            SliderTitle.Font = Enum.Font.Gotham            SliderTitle.Text = name            SliderTitle.TextColor3 = Color3.fromRGB(200, 200, 200)            SliderTitle.TextSize = 12.000            SliderTitle.TextXAlignment = Enum.TextXAlignment.Left                        local SliderValue = Instance.new("TextLabel")            SliderValue.Name = "SliderValue"            SliderValue.Parent = SliderFrame            SliderValue.AnchorPoint = Vector2.new(1, 0)            SliderValue.BackgroundColor3 = Color3.fromRGB(255, 255, 255)            SliderValue.BackgroundTransparency = 1.000            SliderValue.Position = UDim2.new(1, -10, 0, 4)            SliderValue.Size = UDim2.new(0, 40, 0, 14)            SliderValue.Font = Enum.Font.Gotham            SliderValue.Text = tostring(default)            SliderValue.TextColor3 = Color3.fromRGB(232, 17, 85)            SliderValue.TextSize = 12.000            SliderValue.TextXAlignment = Enum.TextXAlignment.Right                        local SliderBackground = Instance.new("Frame")            SliderBackground.Name = "SliderBackground"            SliderBackground.Parent = SliderFrame            SliderBackground.BackgroundColor3 = Color3.fromRGB(48, 48, 48)            SliderBackground.BorderSizePixel = 0            SliderBackground.Position = UDim2.new(0, 10, 0, 22)            SliderBackground.Size = UDim2.new(1, -20, 0, 12)                        local SliderBCorner = Instance.new("UICorner")            SliderBCorner.CornerRadius = UDim.new(0, 6)            SliderBCorner.Parent = SliderBackground                        local SliderFill = Instance.new("Frame")            SliderFill.Name = "SliderFill"            SliderFill.Parent = SliderBackground            SliderFill.BackgroundColor3 = Color3.fromRGB(232, 17, 85)            SliderFill.BorderSizePixel = 0            SliderFill.Size = UDim2.new((default - min) / (max - min), 0, 1, 0)                        local SliderFCorner = Instance.new("UICorner")            SliderFCorner.CornerRadius = UDim.new(0, 6)            SliderFCorner.Parent = SliderFill                        local SliderButton = Instance.new("TextButton")            SliderButton.Name = "SliderButton"            SliderButton.Parent = SliderBackground            SliderButton.BackgroundColor3 = Color3.fromRGB(255, 255, 255)            SliderButton.BackgroundTransparency = 1.000            SliderButton.Size = UDim2.new(1, 0, 1, 0)            SliderButton.Font = Enum.Font.Gotham            SliderButton.Text = ""            SliderButton.TextSize = 12.000                        local dragging = false            local value = default                        local function updateSlider(input)                local sizeX = math.clamp((input.Position.X - SliderBackground.AbsolutePosition.X) / SliderBackground.AbsoluteSize.X, 0, 1)                value = math.floor(min + (max - min) * sizeX)                SliderFill.Size = UDim2.new(sizeX, 0, 1, 0)                SliderValue.Text = tostring(value)                pcall(callback, value)            end                        SliderButton.MouseButton1Down:Connect(function()                dragging = true            end)                        UserInputService.InputEnded:Connect(function(input)                if input.UserInputType == Enum.UserInputType.MouseButton1 then                    dragging = false                end            end)                        UserInputService.InputChanged:Connect(function(input)                if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then                    updateSlider(input)                end            end)                        SliderButton.MouseButton1Click:Connect(function(input)                updateSlider(input)            end)                        local SliderFunctions = {}                        function SliderFunctions:SetValue(newValue)                value = math.clamp(newValue, min, max)                SliderFill.Size = UDim2.new((value - min) / (max - min), 0, 1, 0)                SliderValue.Text = tostring(value)            end                        return SliderFunctions        end                function ElementFunctions:Dropdown(dropdownInfo)            local name = (type(dropdownInfo) == "table" and dropdownInfo.Name) or "Dropdown"            local options = (type(dropdownInfo) == "table" and dropdownInfo.Options) or {"Option 1", "Option 2"}            local default = (type(dropdownInfo) == "table" and dropdownInfo.Default) or options[1]            local callback = (type(dropdownInfo) == "table" and dropdownInfo.Callback) or function() end                        local DropdownFrame = Instance.new("Frame")            DropdownFrame.Name = "DropdownFrame"            DropdownFrame.Parent = Page            DropdownFrame.BackgroundColor3 = Color3.fromRGB(34, 34, 34)            DropdownFrame.BorderSizePixel = 0            DropdownFrame.Size = UDim2.new(0, Page.AbsoluteSize.X - 12, 0, 32)            DropdownFrame.ClipsDescendants = true                        local DropdownCorner = Instance.new("UICorner")            DropdownCorner.CornerRadius = UDim.new(0, 4)            DropdownCorner.Parent = DropdownFrame                        local DropdownTitle = Instance.new("TextLabel")            DropdownTitle.Name = "DropdownTitle"            DropdownTitle.Parent = DropdownFrame            DropdownTitle.BackgroundColor3 = Color3.fromRGB(255, 255, 255)            DropdownTitle.BackgroundTransparency = 1.000            DropdownTitle.Position = UDim2.new(0, 10, 0, 0)            DropdownTitle.Size = UDim2.new(1, -30, 0, 32)            DropdownTitle.Font = Enum.Font.Gotham            DropdownTitle.Text = name .. ": " .. default            DropdownTitle.TextColor3 = Color3.fromRGB(200, 200, 200)            DropdownTitle.TextSize = 12.000            DropdownTitle.TextXAlignment = Enum.TextXAlignment.Left                        local DropdownButton = Instance.new("TextButton")            DropdownButton.Name = "DropdownButton"            DropdownButton.Parent = DropdownFrame            DropdownButton.AnchorPoint = Vector2.new(1, 0)            DropdownButton.BackgroundColor3 = Color3.fromRGB(255, 255, 255)            DropdownButton.BackgroundTransparency = 1.000            DropdownButton.Position = UDim2.new(1, 0, 0, 0)            DropdownButton.Size = UDim2.new(0, 32, 0, 32)            DropdownButton.Font = Enum.Font.Gotham            DropdownButton.Text = "▼"            DropdownButton.TextColor3 = Color3.fromRGB(232, 17, 85)            DropdownButton.TextSize = 12.000                        local OptionsContainer = Instance.new("Frame")            OptionsContainer.Name = "OptionsContainer"            OptionsContainer.Parent = DropdownFrame            OptionsContainer.BackgroundColor3 = Color3.fromRGB(255, 255, 255)            OptionsContainer.BackgroundTransparency = 1.000            OptionsContainer.Position = UDim2.new(0, 0, 0, 32)            OptionsContainer.Size = UDim2.new(1, 0, 0, 0)                        local OptionsList = Instance.new("UIListLayout")            OptionsList.Parent = OptionsContainer            OptionsList.HorizontalAlignment = Enum.HorizontalAlignment.Center            OptionsList.SortOrder = Enum.SortOrder.LayoutOrder            OptionsList.Padding = UDim.new(0, 2)                        local opened = false            local selected = default                        local function createOption(option)                local OptionButton = Instance.new("TextButton")                OptionButton.Name = "OptionButton"                OptionButton.Parent = OptionsContainer                OptionButton.BackgroundColor3 = Color3.fromRGB(48, 48, 48)                OptionButton.BackgroundTransparency = 0.500                OptionButton.BorderSizePixel = 0                OptionButton.Size = UDim2.new(0, DropdownFrame.AbsoluteSize.X - 8, 0, 26)                OptionButton.AutoButtonColor = false                OptionButton.Font = Enum.Font.Gotham                OptionButton.Text = option                OptionButton.TextColor3 = Color3.fromRGB(200, 200, 200)                OptionButton.TextSize = 11.000                                local OptionCorner = Instance.new("UICorner")                OptionCorner.CornerRadius = UDim.new(0, 3)                OptionCorner.Parent = OptionButton                                OptionButton.MouseEnter:Connect(function()                    TweenService:Create(OptionButton, TweenInfo.new(0.15, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {BackgroundTransparency = 0}):Play()                end)                                OptionButton.MouseLeave:Connect(function()                    TweenService:Create(OptionButton, TweenInfo.new(0.15, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {BackgroundTransparency = 0.5}):Play()                end)                                OptionButton.MouseButton1Click:Connect(function()                    selected = option                    DropdownTitle.Text = name .. ": " .. selected                    opened = false                    TweenService:Create(DropdownFrame, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {Size = UDim2.new(0, DropdownFrame.AbsoluteSize.X, 0, 32)}):Play()                    TweenService:Create(DropdownButton, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {Rotation = 0}):Play()                    pcall(callback, selected)                end)            end                        for _, option in ipairs(options) do                createOption(option)            end                        OptionsList:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()                OptionsContainer.Size = UDim2.new(1, 0, 0, OptionsList.AbsoluteContentSize.Y)            end)                        DropdownButton.MouseButton1Click:Connect(function()                opened = not opened                if opened then                    TweenService:Create(DropdownFrame, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {Size = UDim2.new(0, DropdownFrame.AbsoluteSize.X, 0, 32 + OptionsList.AbsoluteContentSize.Y + 6)}):Play()                    TweenService:Create(DropdownButton, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {Rotation = 180}):Play()                else                    TweenService:Create(DropdownFrame, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {Size = UDim2.new(0, DropdownFrame.AbsoluteSize.X, 0, 32)}):Play()                    TweenService:Create(DropdownButton, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {Rotation = 0}):Play()                end            end)                        local DropdownFunctions = {}                        function DropdownFunctions:SetValue(value)                selected = value                DropdownTitle.Text = name .. ": " .. selected            end                        return DropdownFunctions        end                function ElementFunctions:Textbox(textboxInfo)            local name = (type(textboxInfo) == "table" and textboxInfo.Name) or "Textbox"            local placeholder = (type(textboxInfo) == "table" and textboxInfo.Placeholder) or "Enter text..."            local callback = (type(textboxInfo) == "table" and textboxInfo.Callback) or function() end                        local TextboxFrame = Instance.new("Frame")            TextboxFrame.Name = "TextboxFrame"            TextboxFrame.Parent = Page            TextboxFrame.BackgroundColor3 = Color3.fromRGB(34, 34, 34)            TextboxFrame.BorderSizePixel = 0            TextboxFrame.Size = UDim2.new(0, Page.AbsoluteSize.X - 12, 0, 48)                        local TextboxCorner = Instance.new("UICorner")            TextboxCorner.CornerRadius = UDim.new(0, 4)            TextboxCorner.Parent = TextboxFrame                        local TextboxTitle = Instance.new("TextLabel")            TextboxTitle.Name = "TextboxTitle"            TextboxTitle.Parent = TextboxFrame            TextboxTitle.BackgroundColor3 = Color3.fromRGB(255, 255, 255)            TextboxTitle.BackgroundTransparency = 1.000            TextboxTitle.Position = UDim2.new(0, 10, 0, 4)            TextboxTitle.Size = UDim2.new(1, -20, 0, 14)            TextboxTitle.Font = Enum.Font.Gotham            TextboxTitle.Text = name            TextboxTitle.TextColor3 = Color3.fromRGB(200, 200, 200)            TextboxTitle.TextSize = 12.000            TextboxTitle.TextXAlignment = Enum.TextXAlignment.Left                        local Textbox = Instance.new("TextBox")            Textbox.Name = "Textbox"            Textbox.Parent = TextboxFrame            Textbox.BackgroundColor3 = Color3.fromRGB(48, 48, 48)            Textbox.BorderSizePixel = 0            Textbox.Position = UDim2.new(0, 10, 0, 22)            Textbox.Size = UDim2.new(1, -20, 0, 20)            Textbox.ClearTextOnFocus = false            Textbox.Font = Enum.Font.Gotham            Textbox.PlaceholderText = placeholder            Textbox.PlaceholderColor3 = Color3.fromRGB(120, 120, 120)            Textbox.Text = ""            Textbox.TextColor3 = Color3.fromRGB(200, 200, 200)            Textbox.TextSize = 11.000            Textbox.TextXAlignment = Enum.TextXAlignment.Left                        local TextboxTCorner = Instance.new("UICorner")            TextboxTCorner.CornerRadius = UDim.new(0, 3)            TextboxTCorner.Parent = Textbox                        local TextboxPadding = Instance.new("UIPadding")            TextboxPadding.Parent = Textbox            TextboxPadding.PaddingLeft = UDim.new(0, 6)            TextboxPadding.PaddingRight = UDim.new(0, 6)                        Textbox.FocusLost:Connect(function(enterPressed)                if enterPressed then                    pcall(callback, Textbox.Text)                end            end)                        local TextboxFunctions = {}                        function TextboxFunctions:SetValue(text)                Textbox.Text = text            end                        return TextboxFunctions        end                function ElementFunctions:Label(labelInfo)            local text = (type(labelInfo) == "table" and labelInfo.Text) or labelInfo or "Label"                        local LabelFrame = Instance.new("Frame")            LabelFrame.Name = "LabelFrame"            LabelFrame.Parent = Page            LabelFrame.BackgroundColor3 = Color3.fromRGB(34, 34, 34)            LabelFrame.BorderSizePixel = 0            LabelFrame.Size = UDim2.new(0, Page.AbsoluteSize.X - 12, 0, 28)                        local LabelCorner = Instance.new("UICorner")            LabelCorner.CornerRadius = UDim.new(0, 4)            LabelCorner.Parent = LabelFrame                        local Label = Instance.new("TextLabel")            Label.Name = "Label"            Label.Parent = LabelFrame            Label.BackgroundColor3 = Color3.fromRGB(255, 255, 255)            Label.BackgroundTransparency = 1.000            Label.Position = UDim2.new(0, 10, 0, 0)            Label.Size = UDim2.new(1, -20, 1, 0)            Label.Font = Enum.Font.Gotham            Label.Text = text            Label.TextColor3 = Color3.fromRGB(200, 200, 200)            Label.TextSize = 12.000            Label.TextXAlignment = Enum.TextXAlignment.Left                        local LabelFunctions = {}                        function LabelFunctions:SetText(newText)                Label.Text = newText            end                        return LabelFunctions        end                return ElementFunctions    end        return TabFunctionsendreturn Library